rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	function isSystemAdmin(userId) {
      let isSystemAdmin = get(/databases/$(database)/documents/organizations/system/users/$(userId)).data.role == 2;
      return isSystemAdmin;
    }
  	function isOrganizationAdmin(userId, organizationId) {
    	let isOrganizationAdmin = get(/databases/$(database)/documents/organizations/$(organizationId)/users/$(userId)).data.role >= 2;
      return isOrganizationAdmin;
    }
    function isOrganizationStaff(userId, organizationId) {
      let isOrganizationStaff = get(/databases/$(database)/documents/organizations/$(organizationId)/users/$(userId)).data.role >= 1;
      return isOrganizationStaff;
    }

    function getEvent(eventId) {
      return get(/databases/$(database)/documents/events/$(eventId)).data
    }

    function getSpace(spaceId) {
      return get(/databases/$(database)/documents/spaces/$(spaceId)).data
    }

    function getStore(storeId) {
      return get(/databases/$(database)/documents/stores/$(storeId)).data
    }

    function getApplication(appId) {
      return get(/databases/$(database)/documents/_applications/$(appId)).data
    }

    function getTicket(ticketId) {
      return get(/databases/$(database)/documents/_tickets/$(ticketId)).data
    }

    function getTicketByHashId(hashId) {
      return getTicket(get(/databases/$(database)/documents/_ticketHashIds/$(hashId)).data.ticketId)
    }
    
  	match /users/{userId} {
    	allow read: if request.auth.uid == userId || isSystemAdmin(request.auth.uid);
      allow write: if request.auth.uid == userId;

      match /_events/{eventId} {
        allow delete: if isSystemAdmin(request.auth.uid);
      }
    }

    match /organizations/{organizationId} {
      allow read: if isOrganizationAdmin(request.auth.uid, organizationId) || isSystemAdmin(request.auth.uid);

      match /users/{userId} {
        allow read: if isOrganizationAdmin(request.auth.uid, organizationId) || isSystemAdmin(request.auth.uid);
        allow write: if isSystemAdmin(request.auth.uid);
      }
    }
    
    match /stores/{storeId} {
      allow read: if resource.data.isPublic
        || request.time.toMillis() >= resource.data.schedules.startApplication
        || isOrganizationStaff(request.auth.uid, resource.data._organization.id);
      allow write: if isSystemAdmin(request.auth.uid);

      match /_users/{userId} {
        allow create: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId;
        allow read: if request.auth.uid == userId
          || isOrganizationStaff(request.auth.uid, getStore(storeId)._organization.id);
      }
    }
    
  	match /events/{eventId} {
    	allow read: if resource.data.isPublic
        || request.time.toMillis() >= resource.data.schedules.startApplication
        || isOrganizationStaff(request.auth.uid, resource.data._organization.id);
      allow write: if isSystemAdmin(request.auth.uid);

      match /_users/{userId} {
        allow read: if request.auth.uid == userId
          || isOrganizationAdmin(request.auth.uid, getEvent(eventId)._organization.id);
      }

      match /_applications/{applicationId} {
        allow read: if isOrganizationAdmin(request.auth.uid, getEvent(eventId)._organization.id);
      }

      match /docLinks/{docLinkId} {
        allow read: if exists(/databases/$(database)/documents/users/$(request.auth.uid)/_events/$(eventId))
        || isOrganizationAdmin(request.auth.uid, getEvent(eventId)._organization.id);
        allow create: if isOrganizationAdmin(request.auth.uid, getEvent(eventId)._organization.id);
        allow update: if isOrganizationAdmin(request.auth.uid, getEvent(eventId)._organization.id);
        allow delete: if isOrganizationAdmin(request.auth.uid, getEvent(eventId)._organization.id);
      }
    }

    match /_applicationHashIds/{hashId} {
      allow read: if request.auth != null;
      allow write: if isOrganizationAdmin(request.auth.uid, resource.data.organizationId);
      allow delete: if isSystemAdmin(request.auth.uid);
    }
    
    match /_applications/{applicationId} {
      function isValidApplication(app) {
        return 'userId' in app && app.userId is string && app.userId != ''
          && 'eventId' in app && app.eventId is string && exists(/databases/$(database)/documents/events/$(app.eventId))
          && 'circle' in app && app.circle.size() == 6
            && 'name' in app.circle && app.circle.name is string && app.circle.name != ''
            && 'yomi' in app.circle && app.circle.yomi is string && app.circle.yomi != ''
            && 'penName' in app.circle && app.circle.penName is string && app.circle.penName != ''
            && 'penNameYomi' in app.circle && app.circle.penNameYomi is string && app.circle.penNameYomi != ''
            && 'hasAdult' in app.circle && app.circle.hasAdult is bool
            && 'genre' in app.circle && app.circle.genre is string && app.circle.genre != ''
          && 'overview' in app && app.overview.size() == 2
            && 'description' in app.overview && app.overview.description is string && app.overview.description != ''
            && 'totalAmount' in app.overview && app.overview.totalAmount is string && app.overview.totalAmount != ''
          && 'unionCircleId' in app && app.unionCircleId is string
          && 'petitCode' in app && app.petitCode is string
          && 'paymentMethod' in app && app.paymentMethod is string
            && (app.paymentMethod == 'online' || app.paymentMethod == 'bankTransfer')
          && 'remarks' in app && app.remarks is string;
      }
      
      allow read: if request.auth.uid == resource.data.userId
        || isOrganizationAdmin(request.auth.uid, getEvent(resource.data.eventId)._organization.id);
      // allow create: if request.auth != null && isValidApplication(request.resource.data);
      // allow update: if request.auth != null && request.auth.uid == resource.data.userId && isValidApplication(request.resource.data);
      allow delete: if isSystemAdmin(request.auth.uid);

      match /private/meta {
        allow read: if getApplication(applicationId).userId == request.auth.uid
          || isOrganizationAdmin(request.auth.uid, getEvent(getApplication(applicationId).eventId)._organization.id);
        allow write: if isOrganizationAdmin(request.auth.uid, getEvent(getApplication(applicationId).eventId)._organization.id);
        allow delete: if isSystemAdmin(request.auth.uid);
      }
    }

    match /_applicationLinks/{applicationId} {
      allow read: if request.auth.uid == resource.data.userId
        || isOrganizationAdmin(request.auth.uid, getEvent(getApplication(applicationId).eventId)._organization.id);
        
      allow create: if request.auth.uid == request.resource.data.userId
        && getApplication(applicationId) != null;
      allow update: if request.auth.uid == resource.data.userId
        || isOrganizationAdmin(request.auth.uid, getEvent(getApplication(applicationId).eventId)._organization.id);
      allow delete: if isSystemAdmin(request.auth.uid);
    }

    match /_applicationOverviews/{applicationId} {
      allow read: if request.auth.uid == resource.data.userId
        || isOrganizationAdmin(request.auth.uid, getEvent(getApplication(applicationId).eventId)._organization.id);

      allow create: if request.auth.uid == request.resource.data.userId
        && getApplication(applicationId) != null;
      allow update: if request.auth.uid == resource.data.userId
        || isOrganizationAdmin(request.auth.uid, getEvent(getApplication(applicationId).eventId)._organization.id);
      allow delete: if isSystemAdmin(request.auth.uid);
    }

    match /spaces/{spaceId} {
      allow read: if request.time.toMillis() >= getEvent(resource.data.eventId).schedules.publishSpaces
        || isOrganizationAdmin(request.auth.uid, getEvent(resource.data.eventId)._organization.id);
      allow write: if isOrganizationAdmin(request.auth.uid, getEvent(resource.data.eventId)._organization.id);
      allow create: if isOrganizationAdmin(request.auth.uid, getEvent(request.resource.data.eventId)._organization.id);
    }

    match /_spaceHashes/{spaceId} {
      allow read: if request.auth != null;
      allow write: if isOrganizationAdmin(request.auth.uid, getEvent(resource.data.eventId)._organization.id);
      allow create: if isOrganizationAdmin(request.auth.uid, getEvent(request.resource.data.eventId)._organization.id);
    }

    match /_tickets/{ticketId} {
      allow read: if request.auth.uid == resource.data.userId
        || isOrganizationStaff(request.auth.uid, getStore(resource.data.storeId)._organization.id);
      allow delete: if isSystemAdmin(request.auth.uid);

      match /private {
        match /meta {
          allow read: if getTicket(ticketId).userId == request.auth.uid
            || isOrganizationStaff(request.auth.uid, getStore(getTicket(ticketId).storeId)._organization.id);
          allow write: if isOrganizationAdmin(request.auth.uid, getStore(getTicket(ticketId).storeId)._organization.id);
          allow delete: if isSystemAdmin(request.auth.uid);
        }
        match /usedStatus {
          allow read: if getTicket(ticketId).userId == request.auth.uid
            || isOrganizationStaff(request.auth.uid, getStore(getTicket(ticketId).storeId)._organization.id);
          allow write: if isOrganizationStaff(request.auth.uid, getStore(getTicket(ticketId).storeId)._organization.id);
          allow delete: if isSystemAdmin(request.auth.uid);
        }
      }
    }

    match /_ticketHashIds/{hashId} {
      allow read: if request.auth != null;
      allow delete: if isSystemAdmin(request.auth.uid);
    }

    match /_ticketUsers/{hashId} {
      function isOnlyUsableUserId() {
        let diff = request.resource.data.diff(resource.data);
        return diff.changedKeys().hasAll(['usableUserId']);
      }

      allow read: if request.auth.uid == resource.data.userId
        || (request.auth.uid == resource.data.usableUserId || resource.data.usableUserId == null)
        || isOrganizationStaff(request.auth.uid, getStore(getTicketByHashId(hashId).storeId)._organization.id);
      allow write: if request.auth.uid == resource.data.userId
        || (resource.data.usableUserId == null && isOnlyUsableUserId())
        || isOrganizationAdmin(request.auth.uid, getStore(getTicketByHashId(hashId).storeId)._organization.id);
      allow delete: if isSystemAdmin(request.auth.uid);
    }

    match /_payments/{paymentId} {
      allow read: if request.auth.uid == resource.data.userId
        || (resource.data.applicationId != null && isOrganizationStaff(request.auth.uid, getEvent(getApplication(resource.data.applicationId).eventId)._organization.id))
        || (resource.data.ticketId != null && isOrganizationStaff(request.auth.uid, getStore(getTicket(resource.data.ticketId).storeId)._organization.id));
      allow write: if 
           (resource.data.applicationId != null && isOrganizationAdmin(request.auth.uid, getEvent(getApplication(resource.data.applicationId).eventId)._organization.id))
        || (resource.data.ticketId != null && isOrganizationAdmin(request.auth.uid, getStore(getTicket(resource.data.ticketId).storeId)._organization.id));
      allow delete: if isSystemAdmin(request.auth.uid);
    }

    match /_inquiries/{inquiryId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if isSystemAdmin(request.auth.uid);

      match /private/meta {
        allow read: if isSystemAdmin(request.auth.uid);
        allow write: if isSystemAdmin(request.auth.uid);
      }
    }

    match /informations/{informationId} {
      allow read: if resource.data.isPublished
        || isSystemAdmin(request.auth.uid);
      allow write: if isSystemAdmin(request.auth.uid);
    }
    
    // match /{document=**} {
    //  allow read, write: if false;
    // }
  }
}
