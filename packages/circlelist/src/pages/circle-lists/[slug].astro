---
import type {
  SockbaseApplicationDocument,
  SockbaseApplicationHashIdDocument,
  SockbaseApplicationLinksDocument,
  SockbaseApplicationMeta,
  SockbaseCircleListControlDocument,
  SockbaseEventDocument,
  SockbaseSpaceDocument
} from "sockbase";
import listLib from "../../libs/list";
import eventLib from "../../libs/event";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import applicationLib from "../../libs/application";
import ResponsiveTable from "../../components/ResponsiveTable.astro";
import dayjs from "dayjs"

type ListProp = {
  listControl: SockbaseCircleListControlDocument;
  events: SockbaseEventDocument[];
  spaces: (SockbaseSpaceDocument & { eventId: string })[];
  appHashes: SockbaseApplicationHashIdDocument[];
  apps: SockbaseApplicationDocument[];
  appMetas: Record<string, SockbaseApplicationMeta>;
  appLinks: SockbaseApplicationLinksDocument[];
  circleCutURLs: { id: string; url: string | null }[];
}

export const getStaticPaths = async () => {
  const controls = (await listLib.getListControlsAsync())
    .filter(c => c.isPublic);
  if (controls.length === 0) {
    return []
  }

  const eventIds = controls
    .filter(control => control.eventIds || control.eventId)
    .map((control) => control.eventIds ?? [control.eventId ?? ''])
    .flat();
  console.log(eventIds)

  const events = await Promise.all(eventIds.map(async id => eventLib.getEventByIdAsync(id)))
  const spaces = await Promise.all(eventIds.map(async id => ({
    id,
    data: await eventLib.getSpacesByEventIdAsync(id)
  })))
    .then(fetchedSpaces => {
      return fetchedSpaces.reduce((p, c) => ({
        ...p,
        [c.id]: c.data
      }), {} as Record<string, SockbaseSpaceDocument[]>)
    })

  const appHashesByEvent = await Promise.all(eventIds.map(async id => ({
    id,
    data: await applicationLib.getApplicationHashIdByEventIdAsync(id)
  })))
    .then(fetchedAppHashes => {
      return fetchedAppHashes.reduce((p, c) => ({
        ...p,
        [c.id]: c.data
      }), {} as Record<string, SockbaseApplicationHashIdDocument[]>)
    })

  const appsByEvent = await Promise.all(eventIds.map(async id => ({
    id,
    data: await applicationLib.getApplicationsByEventIdAsync(id)
  })))
    .then(fetchedApps => {
      return fetchedApps.reduce((p, c) => ({
        ...p,
        [c.id]: c.data
      }), {} as Record<string, SockbaseApplicationDocument[]>)
    })

  const appIds = Object.values(appsByEvent).flat().map(a => a.id)
  const appHashIds = Object.values(appsByEvent).flat().map(a => a.hashId)
  const appMetas = await Promise.all(appIds.map(async id => ({
    id,
    data: await applicationLib.getApplicationMetaByIdAsync(id)
  })))
    .then(fetchedAppMetas => {
      return fetchedAppMetas.reduce((p, c) => ({
        ...p,
        [c.id]: c.data
      }), {} as Record<string, SockbaseApplicationMeta>)
    })

  const appLinks = await Promise.all(appIds.map(async id => await applicationLib.getApplicationLinksByIdAsync(id)))
  const circleCutURLs = await Promise.all(appHashIds
    .filter(id => id)
    .map(async id => ({
      id: id ?? '',
      url: await applicationLib.getCircleCutURLByAppHashIdAsync(id ?? '')
    })))

  const pageProps = controls
    .filter(c => c.isPublic)
    .filter(c => c.eventIds || c.eventId)
    .reduce((p, c) => {
      const eventIds = c.eventIds ?? [c.eventId ?? '']
      const eventsByControl = eventIds.map(id => {
        const event = events.find(e => e.id === id)
        if (!event) {
          throw new Error(`Event not found: ${id}`)
        }
        return event
      })

      const spacesByControl = eventIds
        .map(id => spaces[id])
        .flat()
        .map(space => ({
          ...space,
          eventId: space.eventId
        }))
      const appHashesByControl = eventIds.map(id => appHashesByEvent[id]).flat()
      const appsByControl = eventIds.map(id => appsByEvent[id]).flat()

      const appMetasByControl = appsByControl.map(app => ({
          id: app.id,
          appMeta: appMetas[app.id]
        }))
        .reduce((p, c) => ({
          ...p,
          [c.id]: c.appMeta
        }), {} as Record<string, SockbaseApplicationMeta>)

        const appLinksByControl = appsByControl.map(app => {
          const appLink = appLinks.find(link => link.applicationId === app.id)
          if (!appLink) {
            throw new Error(`AppLink not found: ${app.id}`)
          }
          return appLink
        })

        const circleCutURLsByControl = appsByControl.map(app => {
          const circleCutURL = circleCutURLs.find(url => url.id === app.hashId)
          if (!circleCutURL) {
            throw new Error(`CircleCutURL not found: ${app.hashId}`)
          }
          return circleCutURL
        })

      return {
        ...p,
        [c.id]: {
          listControl: c,
          events: eventsByControl,
          spaces: spacesByControl,
          appHashes: appHashesByControl,
          apps: appsByControl,
          appMetas: appMetasByControl,
          appLinks: appLinksByControl,
          circleCutURLs: circleCutURLsByControl
        }
      }
    }, {} as Record<string, ListProp>)

  return controls.map((control) => ({
    params: { slug: control.id },
    props: pageProps[control.id]
  }));
}

const convertLinks = (app: SockbaseApplicationDocument) => {
  const appLinksDoc = props.appLinks.find(appLink => appLink.applicationId === app.id);
  return [
    ...appLinksDoc?.twitterScreenName
      ? [{ label: 'X (Twitter)', path: `https://x.com/${appLinksDoc.twitterScreenName}` }]
      : [],
    ...appLinksDoc?.pixivUserId
      ? [{ label: 'pixiv', path: `https://www.pixiv.net/users/${appLinksDoc.pixivUserId}` }]
      : [],
    ...appLinksDoc?.websiteURL
      ? [{ label: 'Web', path: appLinksDoc.websiteURL }]
      : [],
    ...appLinksDoc?.menuURL
      ? [{ label: 'お品書き', path: appLinksDoc.menuURL }]
      : [],
  ]
}

const props = Astro.props as ListProp
const now = new Date();

const eventName = props.events.map(e => e.name).join(', ')

const apps = props.apps
  .filter(a => props.appMetas[a.id].applicationStatus === 2)

const spaces = props.listControl.type === 1
  ? props.spaces
    .sort((a, b) => a.spaceName.localeCompare(b.spaceName))
    .map(s => {
      const hashDoc = props.appHashes.find(appHash => appHash.spaceId === s.id);
      const appDoc = apps.find(app => app.id === hashDoc?.applicationId);
      if (!appDoc) {
        return {
          id: s.id,
          appId: '',
          spaceName: `(${s.spaceName})`,
          circleName: '',
          penName: '',
          hasAdult: false,
          links: [],
          event: undefined
        }
      }

      const links = convertLinks(appDoc);
      const eventDoc = props.events.find(e => e.id === s.eventId);
      const circleCutURL = props.circleCutURLs.find(circleCutURL => circleCutURL.id === appDoc.hashId);

      return {
        id: s.id,
        appId: appDoc.id,
        spaceName: s.spaceName,
        circleName: appDoc.circle.name,
        penName: appDoc.circle.penName,
        hasAdult: appDoc.circle.hasAdult,
        links,
        circleCutURL,
        event: eventDoc
      }
    })
  : apps.sort((a, b) => a.circle.yomi.localeCompare(b.circle.yomi))
    .map((app, i) => {
      const links = convertLinks(app);
      const circleCutURL = props.circleCutURLs.find(circleCutURL => circleCutURL.id === app.hashId);
      const eventDoc = props.events.find(e => e.id === app.eventId);

      return {
        id: i + 1,
        appId: app.id,
        spaceName: null,
        circleName: app.circle.name,
        penName: app.circle.penName,
        hasAdult: app.circle.hasAdult,
        links,
        circleCutURL,
        event: eventDoc
      }
    })
---

<DefaultLayout title={`${eventName} サークルリスト`}>
    {props.events.map(e => (
      <ul class="breadcrumbs">
      <li><a href={e.websiteURL}>{e.name} Web サイト</a></li>
    </ul>
    ))}

  <h1>{eventName} サークルリスト</h1>

  <p class="date">
    {dayjs(now).format("YYYY年 M月 D日")} 更新
  </p>

  {props.listControl.type === 0 && (
    <p>
      申し込みを受理したサークルの一覧を 50 音順で表示しています。
    </p>
  )}

  <ResponsiveTable>
    <thead>
      <tr>
        <th>イベント</th>
        {props.listControl.type === 1 && <th>配置番号</th>}
        <th>サークル</th>
        <th>ペンネーム</th>
        <th>成人向</th>
        <th>リンク</th>
      </tr>
    </thead>
    <tbody>
      {spaces.map(s => (
        <tr id={s.spaceName}>
          {props.listControl.showEventName && <td data-label="イベント">{s.event?.name}</td>}
          {props.listControl.type === 1 && <td data-label="配置番号">{s.spaceName}</td>}
          <td data-label="サークル">{s.circleName}</td>
          <td data-label="ペンネーム">{s.penName}</td>
          <td data-label="成人向">{s.hasAdult ? '成人向' : '-'}</td>
          <td data-label="リンク">
            {s.links.length === 0 && '-'}
            {s.links.map((link, index) => (
              <><a href={link.path} target="_blank">{link.label}</a>{index < s.links.length - 1 && ' '}</>
            ))}
          </td>
        </tr>
      ))}
    </tbody>
  </ResponsiveTable>
  
  {props.listControl.type === 1 && <>
    <h3>Webカタログβ</h3>
    <p class="circleCutRack">
      {spaces.filter(s => s.circleCutURL)
      .map(s => {
        const app = props.apps.find(a => a.id === s.appId);
        const spaces = props.events.map(e => e.spaces).flat();
        const isDualSpace = spaces.find(s => s.id === app?.spaceId)?.isDualSpace;
        return (
          s.circleCutURL
            ? (
              <>
                <a href={`#${s.spaceName}`} class={props.listControl.dualSpaceCircleCutType === 2 && isDualSpace ? 'dualSpace' :''}>
                  <img src={s.circleCutURL.url} class="circleCutImage" />
                </a>
                {props.listControl.dualSpaceCircleCutType === 1 && isDualSpace
                  ? <a href={`#${s.spaceName}`}>
                    <img src={s.circleCutURL.url} class="circleCutImage" />
                  </a>
                  : <></>}
              </>
            )
            : <></>
        )
      })}
    </p>
  </>}
</DefaultLayout>

<style lang="scss">
  .date {
    margin-top: -10px;
  }
  .circleCutRack {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    background-color: #000000;

    a {
      display: inline-block;
      width: calc(100% / 8);
      font-size: 0;
      &.dualSpace {
        width: calc(100% / 4);
      }
      @media screen and (max-width: 840px) {
        width: calc(100% / 4);
        &.dualSpace {
          width: calc(100% / 2);
        }
      }
      img {
        width: 100%;
        height: auto;
      }
    }
  }
  :target {
    animation: highlight 1s infinite alternate;
    @keyframes highlight {
      0% {
        background-color: inherit;
      }
      100% {
        background-color: #ba365140;
      }
    }
  }
</style>
